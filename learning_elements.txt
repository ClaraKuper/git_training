Learning steps

- tutorial https://www.youtube.com/watch?v=8JJ101D3knE
	- What is git: version control system
	- Track history, work together
	- centralized vs. distributed version control systems (central server vs. individual copies)
	
	- command line git (fast), gui (also nice)
	- configuring git, set name, mail, default editor
	- set default editor - editor added to global path, git config --global -core.editot "name --wait"
	- end of line setting to imput for mac and linux, set to true for windows
	
	- https://git-scm.com/docs/ is the git documentation.
	- git "command" --help = long help documentation
	- git "commanf" -h = short help documentation
	
	=========
	SNAPSHOTS
	=========
	
	git folder is hidden in directory, can be shown with flag -a
	.git folder has all the history and should not be touched!
	
	========
	WORKFLOW
	========
	
	git repo is a hidden subdirectory in project directory
	creating a commit = taking a project snapshot
	staging area/index -> allows for review before commit
	add file1 file2 to put files into staging
	REVIEW BEFORE COMMIT 
	commit with message
	commiting does NOT clean the staging area! 
	
	changes in local folder will not yet be in staging.
	each commit has a id
	- what was changed
	- who changed
	- full project content! BUT compressed, and NO duplicates
	
	commits without messages will open default editor to add messages.
	
	=====================
	COMMIT BEST PRACTICES
	=====================
	
	Commit often, but not too often (every time you reach a point you might like to return to).
	make commits logical parts
	logically structured commits make it easier to find commit messages
	use present tense
	
	============
	SKIP STAGING
	============
	
	Not really recommended.
	
	==============
	DELETING FILES
	==============
	
	git ls-files show files in staging area
	git rm removes files from working directory and staging areas simultaneously
	
	============
	RENAME FILES
	============
	
	renaming is a double-step operation -> deleting the old file, and adding a new file. 
	both changes need to be staged and committed! 
	
	*********************************************************
	* When renaming, make sure the renamed files isn't open *
	*********************************************************
	
	=======================================
	REMOVE FILES THAT ARE STAGED AS COMMITS
	=======================================
	
	after adding files or folders to staging, we cannot untrack them with adding them to .gitignore!
	remove them from staging first with git rm --cached filename
	add folder/file to git 
	
	================
	SHORT GIT OUTPUT
	================
	
	git status -s
	"M" (red, right column) - changes in the file in working directory
	"M" (green, left column) - changes in the file in staging area
	
	"?" - not tracked
	"A" - added
	"D" - deleted?
	
	
	========================================
	SHOW GIT DIFF BETWEEN STAGES AND VERSION
	========================================
	
	git diff --staged
	shows changes between staging area and last commit
	--- old copy
	+++ new copy (in staging)
	git shows batches of code, never the full thing.
	
	
	git diff 
	shows changes between working directory and staging area
	
	
	=======
	HISTORY
	=======
	
	git log shows commit history
	git log --oneline shows all commits in one line
	git log --oneline --reverse shows first commit first
	
	========================
	SHOWING SPECIFIC COMMITS
	========================
	
	git show character identifier
	git show HEAD
	git show HEAD~number go back number steps from HEAD
	git show HEAD~1:full_path_to_dir shows the full file rather than just changes
	
	=======
	ls-tree
	=======
	
	git ls-tree commit shows which files or dirs were there
	
	===========
	GIT OBJECTS
	===========
	
	commits
	blobs (files)
	trees (dirs)
	tags
	
	===============
	UNSTAGE COMMITS
	===============
	
	git restore/ git reset
	
	git restore --staged takes the last copy from the project (last commit) and puts it into the staging area.
	this essentially undoes all staged changes.
	
	git restore undoes the local changes.
	
	git clean -fd removes local changes.
	
	git restore with source -> point to commit from where we want to restore
	
##########################	
####### BRANCHES #########
##########################

	Branches are pointers to commits
	switching the branch will reset the working directory to the state of the directory at the relevant pointer location
	-> there is always ever one single working directory! 
	
	switching branches simply means moving the head pointer around.

	"Switch" = "Checkout" 
	
	git log branch1..branch2 [--oneline] lists all commits that are in one, but not in another branch
	git diff branch1..branch2 OR
	git diff (implicit current branch) branch2
	
	
	========
	STASHING
	========
	
	Stashes are changes saved on, but not yet commited to a specific branch
	=> what I need to know is: if I wrote changes to the wrong branch, how can I apply them to a new branch? 
	Stash them, and apply the stash to another branch! 
	
==========
GIT MERGES
==========

fast-forward merges
	- work when only one branch has changes
	- default when the commit is just in front. 
	- fast forward merge can be manually disabled! 
	- no ff makes history look less linear
	- no ff allows for easier feature reversion
	 
3-way-merges
	- works when both the branches underwent changes, merge is based on last common point, and the tips of each branch.
	
Created an extra branch from branch.

Create and switch to branch with switch -C branchname.

=====================
MERGING BEST PRACTICE
=====================

Delete the branch right after it was merged. 
Give branches meaningful names
check: git branch --merges -> shows all merged branches (safe to delete)
check: git branch --no-merged -> shows all non-merged branches (unsafe to delete!)


=================
MERGING CONFLICTS
=================

Best manually.

===================
WORKING WITH REMOTE
===================

Push a test branch to remote.


